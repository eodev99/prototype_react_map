{"version":3,"sources":["entities/AreaGroup.js","context/AppReducer.js","context/GroupsState.js","components/MapPanel.jsx","components/ControlPanel.jsx","App.js","reportWebVitals.js","index.js"],"names":["AreaGroup","uid","color","areas","this","areaId","push","filter","area","state","action","type","groups","group","id","payload","alert","initialState","GroupsContext","createContext","GroupsProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteGroup","groupId","createGroup","updateGroup","StyledMapPanel","styled","div","MapPanel","selectedCountries","styles","addArea","name","newCountries","includes","setState","removeArea","item","removeAllAreas","giveColor","areaName","length","map","getAreas","onEachArea","feature","layer","properties","WD13NM","self","bindPopup","on","click","contextmenu","style","fillColor","weight","opacity","fillOpacity","testCreateGroup","areaGroup","Math","floor","random","toString","substr","testClickGroup","e","target","find","g","background","onClick","MapContainer","class","height","zoom","center","TileLayer","attribution","url","GeoJSON","data","features","onEachFeature","Component","button","makeGroup","ControlPanel","StyledDiv","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc3a4420.chunk.js","sourcesContent":["class AreaGroup{\r\n    constructor(uid, color, areas){\r\n        this.uid = uid\r\n        this.color = color;\r\n        this.areas = areas; //array of areas in the group\r\n    }\r\n\r\n    addArea(areaId) {\r\n        this.areas.push(areaId)\r\n    }\r\n\r\n    removeArea(areaId) {\r\n        this.areas.filter((area) => area !== areaId)\r\n    }\r\n\r\n    getAreas(){\r\n        return this.areas\r\n    }\r\n}\r\n\r\nexport default AreaGroup","export default (state, action) => {\r\n    switch(action.type) {\r\n      case 'DELETE_GROUP':\r\n        return {\r\n          ...state,\r\n          groups: state.groups.filter(group => group.id !== action.payload)\r\n        }\r\n      case 'CREATE_GROUP':\r\n          alert(\"CREATE\")\r\n        return {\r\n          ...state,\r\n          groups: [action.payload, ...state.groups]\r\n        }\r\n      case 'UPDATE_GROUP':\r\n        //update\r\n        return {\r\n          ...state,\r\n          groups: [action.payload, ...state.groups]\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  }","import React, { createContext, useReducer } from \"react\";\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nconst initialState = {\r\n  groups: [],\r\n};\r\n\r\nexport const GroupsContext = createContext(initialState);\r\n\r\nexport const GroupsProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  function deleteGroup(groupId) {\r\n    dispatch({\r\n      type: \"DELETE_GROUP\",\r\n      payload: groupId,\r\n    });\r\n  }\r\n\r\n  function createGroup(group) {\r\n    dispatch({\r\n      type: \"CREATE_GROUP\",\r\n      payload: group,\r\n    });\r\n  }\r\n\r\n  function updateGroup(group) {\r\n    dispatch({\r\n      type: \"UPDATE_GROUP\",\r\n      payload: group,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GroupsContext.Provider\r\n      value={{\r\n        groups: state.groups,\r\n        deleteGroup,\r\n        createGroup,\r\n        updateGroup,\r\n      }}\r\n    >\r\n      {children}\r\n    </GroupsContext.Provider>\r\n  );\r\n};\r\n","import React, { Component, useState, useEffect } from \"react\";\r\nimport areas from \"../data/wards.json\";\r\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"../styles/map.css\";\r\nimport styled from \"styled-components\";\r\nimport { render } from \"@testing-library/react\";\r\nimport areaGroup from \"../entities/AreaGroup\";\r\nimport { GroupsProvider, GroupsContext } from \"../context/GroupsState\";\r\nimport AreaGroup from \"../entities/AreaGroup\";\r\n\r\nconst StyledMapPanel = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\n//all of this needs to be refactored out of the component\r\n\r\nclass MapPanel extends Component {\r\n  state = { selectedCountries: [], styles: [], groups: [] };\r\n\r\n  componentDidMount() {}\r\n\r\n  addArea = (name) => {\r\n    var newCountries = this.state.selectedCountries.includes(name)\r\n      ? this.state.selectedCountries\r\n      : [...this.state.selectedCountries, name];\r\n    this.setState({\r\n      selectedCountries: newCountries,\r\n    });\r\n  };\r\n\r\n  removeArea = (name) => {\r\n    var newCountries = this.state.selectedCountries.includes(name)\r\n      ? this.state.selectedCountries.filter((item) => item !== name)\r\n      : this.state.selectedCountries;\r\n    this.setState({\r\n      selectedCountries: newCountries,\r\n    });\r\n  };\r\n\r\n  removeAllAreas = () => {\r\n    this.setState({ selectedCountries: [] });\r\n  };\r\n\r\n  giveColor = (areaName) => {\r\n    //if area is in group apply group color else apply default\r\n\r\n    const defaultColor = \"blue\";\r\n    const selectedColor = \"red\";\r\n    var color = defaultColor;\r\n\r\n    const groups = this.state.groups;\r\n\r\n    if (this.state.groups.length > 0) {\r\n      groups.map((group) => {\r\n        if (group.getAreas().includes(areaName)) {\r\n          color = group.color;\r\n        }\r\n      });\r\n    }\r\n    //if area is selected apply selected color\r\n    if(this.state.selectedCountries.length > 0){\r\n      color = this.state.selectedCountries.includes(areaName)\r\n      ? selectedColor\r\n      : color;\r\n    }\r\n   \r\n\r\n    return color;\r\n  };\r\n\r\n  onEachArea = (feature, layer) => {\r\n    let areaName = feature.properties.WD13NM;\r\n    var self = this;\r\n\r\n    layer.bindPopup(areaName);\r\n\r\n    layer.on({\r\n      click: () => self.addArea(areaName),\r\n      contextmenu: () => self.removeArea(areaName),\r\n    });\r\n  };\r\n\r\n  style = (feature) => {\r\n    const {\r\n      properties: { WD13NM },\r\n    } = feature;\r\n\r\n    return {\r\n      fillColor: this.giveColor(feature.properties.WD13NM),\r\n      weight: 0.3,\r\n      opacity: 1,\r\n      color: \"white\",\r\n      fillOpacity: 0.5,\r\n    };\r\n  };\r\n\r\n  testCreateGroup = () => {\r\n    //get current grouping from state\r\n    const groups = this.state.selectedCountries;\r\n    // create new areagroup with current grouping as groups and assign random color and id\r\n    const areaGroup = new AreaGroup(\r\n      Math.floor(Math.random() * 10000),\r\n      \"#\" + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6),\r\n      groups\r\n    );\r\n    //add new group to state\r\n    this.setState({ groups: [...this.state.groups, areaGroup] });\r\n    //deselect current grouping\r\n    this.removeAllAreas();\r\n  };\r\n\r\n  testClickGroup = (e) => {\r\n    const groupId = e.target.value;\r\n    //get group\r\n    \r\n    const group = this.state.groups.find((g) => g.uid == groupId);\r\n    \r\n    if (group) {\r\n      //unselect selelction\r\n      this.removeAllAreas();\r\n      //set selection to current group\r\n      this.setState({ selectedCountries: group.getAreas() });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <StyledMapPanel>\r\n        <h1 style={{ background: \"#005599\" }} onClick={this.testCreateGroup}>\r\n          Map\r\n        </h1>\r\n        <ul>\r\n          {this.state.groups.map((group) => {\r\n            return <li value={group.uid} onClick={this.testClickGroup}>{group.uid}</li>;\r\n          })}\r\n        </ul>\r\n        <MapContainer\r\n          class=\"map-container\"\r\n          style={{ height: \"80vh\" }}\r\n          zoom={12}\r\n          center={[52.6369, -1.1398]}\r\n        >\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <GeoJSON\r\n            key={this.state.selectedCountries}\r\n            style={this.style}\r\n            data={areas.features}\r\n            onEachFeature={this.onEachArea}\r\n          />\r\n        </MapContainer>\r\n      </StyledMapPanel>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapPanel;\r\n","import React from 'react'\r\nimport styled from \"styled-components\";\r\n\r\nconst groupButton = styled.button`\r\n    background-color: #f35434;\r\n    font-size: 32px;\r\n    color: white;\r\n    `;\r\n\r\nconst makeGroup = () => {\r\n    \r\n}\r\n\r\nconst ControlPanel = () => {\r\n    return (\r\n        <div>\r\n            <h1>CPANEL</h1>\r\n            <groupButton onClick={makeGroup}> Make Group </groupButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControlPanel\r\n","import React from 'react'\n\nimport MapPanel from './components/MapPanel'\nimport ControlPanel from './components/ControlPanel'\nimport styled from \"styled-components\";\nimport { GroupsProvider } from './context/GroupsState';\n\nconst StyledDiv = styled.div`\n    display:flex;\n    justify-content: center;\n    aligh-items: center;\n    font-size: 32px;\n    width: 100%;\n    `;\n\nfunction App() {\n  return (\n    <GroupsProvider>\n    <StyledDiv>\n      <ControlPanel/>\n      <MapPanel/>\n    </StyledDiv>\n    </GroupsProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}